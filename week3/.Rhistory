lmInter <- lm(hunger$Numeric~hunger$Year+hunger$Sex+hunger$Sex*hunger*hunger*Year)
lmInter <- lm(hunger$Numeric~hunger$Year+hunger$Sex+hunger$Sex*hunger$Year)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit,which=1)
fitno <- lm(y ~ x, out2[-1,])
plot(fitno,which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno,  | out2[1,])
resno <- out2[1, "y"] - predict(fitno,out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
df.residual(fit)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/(igma*sqrt(1-hatvalues(fit)))
rstd <- resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma <- sqrt(deviance(fitno)/df.residual(fitno))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
sigma1*sqrt(1-hatvalues(fit)[1])
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
predict(fitno, out2) - predict(fit, out2)
dy <- predict(fitno, out2)-predict(fit, out2)
dy/2*sigma^2
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
head(mtcars)
head(mtcars)
head(mtcars)
source("~/Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/07_RegressionModels/Week2/project.R")
summary(mtcars)
head(mtcars)
mtcars[names]
help(mtcars)
#mean mpg for automatic cars
mean(mpg, mtcars[am]==0)
#mean mpg for automatic cars
mean(mtcars$mpg, mtcars[am]==0)
#mean mpg for automatic cars
mean(mtcars$mpg, mtcars$am==0)
#mean mpg for automatic cars
mean(mtcars$mpg, mtcars$am=0)
#mean mpg for automatic cars
mean(mtcars$mpg[mtcars$am==0])
#mean mpg for manual cars
mean(mtcars$mpg[mtcars$am==1])
#let's plot
boxplot(mtcars$mpg ~ am, data=mtcars, xlab="transmission type", ylab="mpg")
summary(mtcars)
head(mtcars)
#mean mpg for automatic cars
mean(mtcars$mpg[mtcars$am==0])
#mean mpg for manual cars
mean(mtcars$mpg[mtcars$am==1])
#let's plot the data
boxplot(mtcars$mpg ~ am, data=mtcars, xlab="transmission type", ylab="mpg")
tinytex::install_tinytex()
swirl
swirl()
help swirl
help(swirl)
swirl(Regression)
swirl()
install.packages("swirl", dependencies = TRUE)
library(swirl)
swirl()
install.packages("swirl", dependencies = TRUE)
install.packages("swirl", dependencies = TRUE)
swirl()
library(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality)
mdl <- lm(Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality, data=swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ Agriculture + Education + Catholic + Infant.Mortality, data=swiss)
vif(mdl2)
simbias()
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm( Fertility ~ Agriculture, data = swiss)
fit1 <- lm( Fertility ~ Agriculture+Examination+Education, data = swiss)
fit1 <- lm( Fertility ~ Agriculture + Examination + Education, data = swiss)
fit3 <- lm( Fertility ~ Agriculture + Examination + Education, data = swiss)
fit1 <- lm( Fertility ~ Agriculture, data = swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
hapiro.test(fit3$residuals)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
mdl <- glm(avenWinNum ~ ravenScore, binomial(), ravenData)
mdl <- glm(avenWinNum ~ ravenScore, binomial, ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
type anova(mdl)
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
tail(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- qpois()
mdl2 <- qpois(.95, lambda, offset=log(visits+1))
mdl2 <- qpois(.95, lambda, log(visits+1))
mdl2
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits +
| 1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704]).
qpois(.95, mdl2$fitted.values[704])
knitr::opts_chunk$set(echo = TRUE)
#summary(mtcars)
#head(mtcars)
summary(mtcars$mpg[mtcars$am==0])
summary(mtcars$mpg[mtcars$am==1])
mean(mtcars$mpg[mtcars$am==0])
mean(mtcars$mpg[mtcars$am==1])
t.test(mtcars$mpg ~ mtcars$am, mtcars)
install.packages("rjson")
boats <- fromJSON(file="yachtworldAllNorthAmerica_Sept2018.json")
library("rjson")
boats <- fromJSON(file="yachtworldAllNorthAmerica_Sept2018.json")
boats <- fromJSON(file="./yachtworldAllNorthAmerica_Sept2018.json")
la
ls
ls
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
install.packages("rjson")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
install.packages("rjson")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
library("rjson")
boats <- fromJSON(file="~/Desktop/dev/R/BoatMarketAnalysis/yachtworldAllNorthAmerica_Sept2018.json")
summary(boats)
head(boats)
head(boats, 5)
ls
ls
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
View(boats)
boats[[1]]
summary(boats)
type(boats)
typeof(boats)
boats[1]
boats[1]$headroom
boats[1]$make-model
boats[1]$price
boats[1][$price]
boats[1][price]
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
install.packages("rjson")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
summary(boats)
head(boats)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
install.packages("rjson")
plot(boats$loa ~ boats$price)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
summary(boats)
trail(boats)
head(boats)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
clean
clean()
clear
clear()
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r")
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
source("~/Desktop/dev/R/BoatMarketAnalysis/boatanalysis.r", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(boats)
head(boats, 5)
mean(boats$price)
sd(boats$price)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("caret")
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(testing)
plot(testing$CompressiveStrength, col=testing$Cement)
plot(testing$CompressiveStrength, col=testing$Cement+1)
plot(testing$CompressiveStrength, col=testing$BlastFurnaceSlag+1)
plot(testing$CompressiveStrength, col=testing$FlyAsh+1)
plot(testing$CompressiveStrength, col=testing$Water+1)
plot(testing$CompressiveStrength, col=cut2(testing$Water))
library(Hmisc)
plot(testing$CompressiveStrength, col=cut2(testing$Water))
plot(testing$CompressiveStrength, col=cut2(testing$Cement))
plot(testing$CompressiveStrength, col=cut2(testing$Water))
qplot(testing$CompressiveStrength, col=cut2(testing$Water))
plot(testing$CompressiveStrength, col=c("red", "blue", "green", "orange")[cut2(testing$Water)])
plot(testing$CompressiveStrength, col=c("red", "blue", "green", "orange")[cut2(testing$Cement)])
plot(testing$CompressiveStrength, col=c("red", "blue", "green", "orange")[cut2(testing$Cement, g=4)])
plot(testing$CompressiveStrength, col=c("red", "blue", "green", "orange")[cut2(testing$Water, g=4)])
plot(testing$CompressiveStrength, col=c("red", "blue", "green", "orange")[cut2(testing$BlastFurnaceSlag, g=4)])
plot(testing$CompressiveStrength, col=c("red", "blue", "green", "orange")[cut2(testing$Age, g=4)])
plot(testing$CompressiveStrength, col=c("red", "blue", "green", "orange")[cut2(testing$Superplasticizer, g=4)])
plot(testing$CompressiveStrength, col=c("red", "blue", "green", "orange")[cut2(testing$FlyAsh, g=4)])
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(training)
training.frame(colnames(df))
data.frame(colnames(training))
prepro <- preProcess(training[,58:69], method="pca")
prepro
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
plot(testing$CompressiveStrength, col=c("red", "blue", "green", "orange")[cut2(testing$Age, g=4)])
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(testing$CompressiveStrength, col=c("red", "blue", "green", "orange")[cut2(testing$Age, g=4)])
summary(training$Superplasticizer)
log(0)
source("~/Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/08_PracticalMachineLearning/week3/Untitled.R")
source("~/Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/08_PracticalMachineLearning/week3/Untitled.R")
source("~/Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/08_PracticalMachineLearning/week3/Untitled.R")
summary(training)
source("~/Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/08_PracticalMachineLearning/week3/Untitled.R")
table(training$Case)
source("~/Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/08_PracticalMachineLearning/week3/Untitled.R")
source("~/Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/08_PracticalMachineLearning/week3/Untitled.R")
source("~/Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/08_PracticalMachineLearning/week3/Untitled.R")
source("~/Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/08_PracticalMachineLearning/week3/Untitled.R")
source("~/Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/08_PracticalMachineLearning/week3/Untitled.R")
source("~/Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/08_PracticalMachineLearning/week3/Untitled.R")
source("~/Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/08_PracticalMachineLearning/week3/Untitled.R")
source("~/Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/08_PracticalMachineLearning/week3/Untitled.R")
source("~/Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/08_PracticalMachineLearning/week3/Untitled.R")
source("~/Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/08_PracticalMachineLearning/week3/Untitled.R")
source("~/Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/08_PracticalMachineLearning/week3/Untitled.R")
#Question3
library(pgmm)
data(olive)
olive = olive[,-1]
set.seed(125)
fitOlive <- train(Area~., method="rpart", data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(fitOlive,newdata=newdata)
source("~/Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/08_PracticalMachineLearning/week3/Untitled.R")
source("~/Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/08_PracticalMachineLearning/week3/Untitled.R")
install.packages(ElemStatLearn)
#Question4
library(ElemStatLearn)
source("~/Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/08_PracticalMachineLearning/week3/Untitled.R")
source("~/Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/08_PracticalMachineLearning/week4/week4.R")
source("~/Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/08_PracticalMachineLearning/week4/week4.R")
qplot(pred_modGbm, pred_modlda, colour=diagnosis, data = testing)
knitr::opts_chunk$set(echo = TRUE)
fit_yearlwl <- lm(boats$price ~ ., data = boats)
source("~/.active-rstudio-document", echo=TRUE)
source("~/Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/08_PracticalMachineLearning/week4/week4.R")
sqrt(sum(pred_modGbm-testing$diagnosis)^2)
sqrt(sum(pred_modlda-testing$diagnosis)^2)
sqrt(sum(pred_modRf-testing$diagnosis)^2)
sqrt(sum(pred_combined-testing$diagnosis)^2)
summary(pred_modGbm)
head(testing$diagnosis)
summary(pred_combined)
source("~/Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/08_PracticalMachineLearning/week4/week4.R")
summary(pred_combined)
pred_combinedDF <- data.frame(pred_modGbm, pred_modlda, pred_modRf, diagnosis=testing$diagnosis)
pred_combined <- train(diagnosis~., method="rf")
pred_combined <- train(diagnosis~., method="rf", data= pred_combinedDF)
summary(pred_combined)
sqrt(sum(pred_modGbm-testing$diagnosis)^2)
sqrt(sum(pred_modlda-testing$diagnosis)^2)
sqrt(sum(pred_modRf-testing$diagnosis)^2)
sqrt(sum(pred_combined-testing$diagnosis)^2)
summary(pred_modGbm)
head(testing$diagnosis)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
#checking columns with NA
colSums(is.na(data_training))
View(training)
source("~/.active-rstudio-document", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
accuracy <- data.frame(Model = c("DTREE", "GBM", "RF"),
Accuracy = rbind(DTModel_CM$overall[1], GBMModel_CM$overall[1], RFModel_CM$overall[1]))
accuracy <- data.frame(Model = c("DTREE", "GBM", "RF"),
Accuracy = rbind(DTModel_CM$overall[1], GBMModel_CM$overall[1], RFModel_CM$overall[1]))
accuracy
install.packages(leaflet)
install.packages("leaflet")
install.packages("devtools")
library(devtools)
#install.packages("stringr")
install_github('ramnathv/slidify',ref='dev')
install_github('ramnathv/slidifyLibraries',ref='dev')
library(slidify)
library(slidifyLibraries)
setwd("~//Desktop/dev/R/JohnsHopkins DataScienceSpecialization/johnshopkins-data-science-specialization/work/09_DevelopingDataProducts/coursera_hopkins_developingdataproducts/week3")
getwd()
slidify("index.Rmd")
